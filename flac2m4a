#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

while (( $# > 0 )); do
    case "$1" in
        -o|--output)
            shift
            export output="$1"
            shift
            ;;
        -h|--help)
            echo "flacconv (-o|--output) output_dir [--] input ..."
            exit
            ;;
         --)
            shift
            break
            ;;
         *)
            break
    esac
done

if [[ "${output:-}" == "" ]]; then
    echo "output_dir missing!"
    exit 1
elif [[ $# == 0 ]]; then
    echo "No input specified!"
    exit 2
fi

targets=()

function visit() {
    local from="$1"
    local to="$2"
    local parent_target="$3"

    local files=()
    if [[ -d "$from" ]]; then
        local target="dir_${#targets[@]}"
        targets+=("$target")
        local name="$(basename "$from")"
        printf -- '.PHONY : %s\n%s : %s\n' "$target" "$target" "$parent_target"
        printf -- '\tmkdir %q\n' "$to/$name"
        while IFS= read -r -d '' dir; do
            visit "$dir" "$to/$name" "$target"
        done < <(find "$from" -maxdepth 1 -mindepth 1 -type d -print0)

        while IFS= read -r -d '' file; do
            files+=("$file")
        done < <(find "$from" -maxdepth 1 -mindepth 1 -type f -print0)
        to="$to/$name"
    elif [[ -f "$from" ]]; then
        files+=("$from")
    else
        return
    fi
    
    local flacs=()

    for file in "${files[@]}"; do
        if [[ "$file" =~ ^.*\.(jpe?g|png|gif)$ ]]; then
            local target="artwork_${#targets[@]}"
            targets+=("$target")
            printf -- '.PHONY : %s\n%s : %s\n' "$target" "$target" "$parent_target"
            printf -- '\tcp %q %q\n' "$file" "$to/$(basename "$file")"
        elif [[ "$file" =~ ^.*\.flac?$ ]]; then
            flacs+=("$file")
        fi
    done

    local flacs_sorted=()
    while IFS= read -r -d '' flac; do
        flacs_sorted+=("$flac")
    done < <(for flac in "${flacs[@]}"; do printf -- '%s\0' "$flac"; done | sort -z)
    
    local wavs=()
    local wav_targets=()
    for file in "${flacs_sorted[@]}"; do
        local wav_target="flac2wav_${#targets[@]}"
        wav_targets+=("$wav_target")
        targets+=("$wav_target")
        printf -- '.PHONY : %s\n%s : %s\n' "$wav_target" "$wav_target" "$parent_target"

        local name="$(basename "$file")"
        local wav="$to/${name%.*}.wav"
        wavs+=("$wav")
        printf -- '\tflac -s -d -o %q %q\n' "$wav" "$file"
    done
    
    local m4a_targets=()
    for (( i=0; i < ${#flacs_sorted[@]}; i++ )); do
        local m4a_target="wav2m4a_${#targets[@]}"
        m4a_targets+=("$m4a_target")
        targets+=("$m4a_target")
        printf -- '.PHONY : %s\n%s : %s' "$m4a_target" "$m4a_target" "${wav_targets[$i]}"
        if [[ $i != 0 ]]; then
            printf -- ' %s' "${wav_targets[$(($i - 1))]}"
        fi
        if [[ $i != $((${#flacs_sorted[@]} - 1)) ]]; then
            printf -- ' %s' "${wav_targets[$(($i + 1))]}"
        fi
        printf -- '\n'
        
        local name="$(basename "${flacs_sorted[$i]}")"
        local m4a="$to/${name%.*}.m4a"
        printf -- '\tafconvert' 
        printf -- ' %q' "${wavs[$i]}" "$m4a" -d aac -s 3 -u vbrq 90
        if [[ $i != 0 ]]; then
            printf -- ' %q' --gapless-before "${wavs[$(($i - 1))]}"
        fi
        if [[ $i != $((${#flacs_sorted[@]} - 1)) ]]; then
            printf -- ' %q' --gapless-after "${wavs[$(($i + 1))]}"
        fi
        printf -- '\n'
        printf -- '\tflactags2m4atags %q %q >/dev/null\n' "${flacs_sorted[$i]}" "$m4a"
    done

    for (( i=0; i < ${#flacs_sorted[@]}; i++ )); do
        local rm_wav_target="rm_wav_${#targets[@]}"
        targets+=("$rm_wav_target")
        printf -- '.PHONY : %s\n%s : %s' "$rm_wav_target" "$rm_wav_target" "${m4a_targets[$i]}"
        if [[ $i != 0 ]]; then
            printf -- ' %s' "${m4a_targets[$(($i - 1))]}"
        fi
        if [[ $i != $((${#flacs_sorted[@]} - 1)) ]]; then
            printf -- ' %s' "${m4a_targets[$(($i + 1))]}"
        fi
        printf -- '\n'
        printf -- '\trm -- %q\n' "${wavs[$i]}"
    done
}
{
    for input in "$@"; do
        visit "$input" "$output" ""
    done

    printf ".PHONY : all\nall :"
    printf ' %s' "${targets[@]}"
    printf '\n.DEFAULT_GOAL := all\n'
} | make -f - -j

